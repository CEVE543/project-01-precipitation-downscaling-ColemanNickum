---
title: "Project 1"
subtitle: "Bias Correction: Quantile Quantile Mapping"
jupyter: julia-1.9
date: 2023-11-13
author: "Coleman Nickum (CN33)" 

number-sections: true
code-annotations: hover

kind: "Project"
Module: "2"
categories:
    - "Module 2"
    - "Project"

format:
    html: 
        toc-depth: 3
    docx: 
        toc: true
        toc-depth: 3
        fig-format: png
---
## Setup

```{julia}
#| output: false
using Dates
using MultivariateStats
using Plots
using NCDatasets
using StatsBase
using Unitful
using DataFrames
using Statistics

Plots.default(; margin=4Plots.mm, size=(700, 400), linewidth=2)
```


```{julia}
 = "t2m./Users/coleman/Documents/GitHub/project-01-precipitation-downscaling-ColemanNickum/get_data copy.jl"
```

```{julia}
ds_precip = NCDataset("/Users/coleman/Documents/GitHub/project-01-precipitation-downscaling-ColemanNickum/data/raw/precip.nc")
println(ds_precip)
```

```{julia}
precip_time = ds_precip["time"][:];
precip_lon = ds_precip["lon"][:];
precip_lat = ds_precip["lat"][:];
precip = ds_precip["precip"][:,:,:];
```
```{julia}
precip = precip .* 0.0393701 * u"inch";
```
```{julia}
precip_lat = reverse(precip_lat)
precip = reverse(precip, dims=2);
```
```{julia}
close(ds_precip)
```

```{julia}
temp_time = t2m["time"][:];
temp_lon = t2m["longitude"][:];
temp_lat = t2m["latitude"][:];
temp = t2m["t2m"][:];
```

```{julia}
temp_lat = reverse(temp_lat)
temp = reverse(temp, dims=1);
```

```{julia}
time = precip_time
```

## Splitting Data: Training Period vs Testing Period
```{julia}
# Performing a typical split ratio (roughly 70:30) for training and testing data collected from 1979 to 2021. With 42 years of data, the training dataset will encompass 30 years and the testing period will be 12 years (2009 to 2021)
split = time[end] - Dates.Year(12)

training_period = findall(x -> x < split, time)
testing_period = findall(x -> x >= split, time)
```
```{julia}
precip_train = precip[:,:,training_period]
temp_train = temp[training_period]
time_train = time[training_period]
```

```{julia}
precip_test = precip[:,:,testing_period]
temp_test = temp[testing_period]
time_test = time[testing_period]
```


## Preprocessing Data: Climatology and Mean Centering
```{julia}
function preprocess(temp::Array{T, 1}, temp_reference::Array{T, 1})::AbstractMatrix where T
#Computing anomalies that removes climatology from our matrix to allow greater clarity of temperature variations by removing the influence of climate patterns
climatology = mean(temp_reference, dims=1)
anomalies = temp .- climatology
 
#Centering the variables (locations) in our matrix so that they have a mean of zero, which will allow us to better intepret the relationship (overall change/deiviations) between the intercept (first PC) to other PCs:
location_means = mean(anomalies, dims=1)
centered_temp = anomalies .- location_means

#Reshaping our temperature dataset to produce a 2D matrix of time (rows) and locations (columns): 
temp_mat_center = reshape(centered_temp, size(temp, 1) * size(temp, 2), size(temp, 3))
temp_mat = temp_mat_center'
    return temp_mat
end
```

```{julia}
# Extract the years and months from the time vector
years = Dates.year.(temp_time)
months = Dates.month.(temp_time)
```

```{julia}
# Create a new DataFrame for easier manipulation
using DataFrames
df = DataFrame(Year = years, Month = months, Temperature = temp)
```

```{julia}
# Compute the climatology (mean temperature for each month)
climatology = combine(groupby(df, [:Month]), :Temperature => mean)

# Create a line plot for the climatology
plot(climatology[!, :Temperature_mean],
     xlabel = "Month",
     ylabel = "Mean Temperature",
     label = "Climatology",
     title = "Temperature Climatology",
     xticks = (1:12, monthname.(1:12)),
     legend = :topright)
```

```{julia}
#Preprocessing temp_train to center, scale, and account for climatology
preprocessed_temp = preprocess(temp, temp_train);
```