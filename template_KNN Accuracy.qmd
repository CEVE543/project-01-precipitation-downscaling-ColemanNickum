```{julia}
Function to evaluate KNN predictions
function evaluate_knn(predictions, true_values)
    # Assuming predictions and true_values have the same dimensions
    
    # Convert predictions to the same type as true_values for comparison
    predictions = convert.(eltype(true_values), predictions)
    
    # Calculate accuracy
    num_samples = size(predictions, 3)
    accuracy = sum(predictions .== true_values) / num_samples
    
    return accuracy
end

function predict_knn(temp_train, temp_test, precip_train; n_pca::Int)
    X_train = preprocess(temp_train, temp_train)
    X_test = preprocess(temp_test, temp_train)

    # fit the PCA model to the training data
    pca_model = fit(PCA, X_train; maxoutdim=n_pca)

    # project the test data onto the PCA basis
    train_embedded = predict(pca_model, X_train)
    test_embedded = predict(pca_model, X_test)

    precip_pred = map(1:size(X_test, 2)) do i
        _, dist = knn(train_embedded', test_embedded[:, i], 3)
        # Extract precipitation values from the nearest neighbors
        precip_values = precip_train[:, :, dist]
    end

    
    # calculate the mean absolute error (MAE) between predicted and actual precipitation
    precip_actual = precip_test
    mae = sum(abs(precip_pred .- precip_actual)) / length(precip_actual)

    # return a matrix of predictions and MAE
    return precip_pred, mae

end

```

```{julia}
# Assuming you have your data: temp_train, temp_test, precip_train
n_pca = 4  # Replace with your desired number of principal components

# Call the function to get both precipitation predictions and accuracy
t_sample = rand(1:size(temp_test, 3), 4)
precip_pred, mae = predict_knn(temp_train, temp_test[:, :, t_sample], precip_train; n_pca=4)

# If you only want the accuracy, you can ignore the precipitation predictions
println("mae: ", mae)
```

## Predicted vs. Actual Values
```{julia}
t_sample = rand(1:size(temp_test, 3), 4)
precip_pred = predict_knn(temp_train, temp_test[:, :, t_sample], precip_train; n_pca=4)

p = map(eachindex(t_sample)) do ti
    t = t_sample[ti]
    y_pred = precip_pred[ti]'
    y_actual = precip_test[:, :, t]'
    cmax = max(maximum(skipmissing(y_pred)), maximum(skipmissing(y_actual)))
    cmax = ustrip(u"mm", cmax)

    p1 = heatmap(
        precip_lon,
        precip_lat,
        y_pred;
        xlabel="Longitude",
        ylabel="Latitude",
        title="Predicted",
        aspect_ratio=:equal,
        clims=(0, cmax)
    )
    p2 = heatmap(
        precip_lon,
        precip_lat,
        y_actual;
        xlabel="Longitude",
        ylabel="Latitude",
        title="Actual",
        aspect_ratio=:equal,
        clims=(0, cmax)
    )
    plot(p1, p2; layout=(2, 1), size=(1000, 400))
end
plot(p...; layout=(2, 3), size=(1400, 1200))
```